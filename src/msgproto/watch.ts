// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MsgType } from '../msgproto/msg-type';


export class Watch {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Watch {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsWatch(bb:flatbuffers.ByteBuffer, obj?:Watch):Watch {
  return (obj || new Watch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsWatch(bb:flatbuffers.ByteBuffer, obj?:Watch):Watch {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Watch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

msgtype():MsgType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MsgType.MSG;
}

recipient():string|null
recipient(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recipient(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

watch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startWatch(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addMsgtype(builder:flatbuffers.Builder, msgtype:MsgType) {
  builder.addFieldInt8(1, msgtype, MsgType.MSG);
}

static addRecipient(builder:flatbuffers.Builder, recipientOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, recipientOffset, 0);
}

static addWatch(builder:flatbuffers.Builder, watch:boolean) {
  builder.addFieldInt8(3, +watch, +false);
}

static endWatch(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishWatchBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedWatchBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createWatch(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, msgtype:MsgType, recipientOffset:flatbuffers.Offset, watch:boolean):flatbuffers.Offset {
  Watch.startWatch(builder);
  Watch.addId(builder, idOffset);
  Watch.addMsgtype(builder, msgtype);
  Watch.addRecipient(builder, recipientOffset);
  Watch.addWatch(builder, watch);
  return Watch.endWatch(builder);
}
}
